#后续改为nacos配置中心
#spring:
#  application:
#    name: pob-product
#  datasource:
#    driver-class-name: com.mysql.jdbc.Driver
#    url: jdbc:mysql://101.33.248.222:3306/pob_product?characterEncoding=utf-8&useSSL=false
#    username: root
#    password: 123456
#  main:
#    allow-bean-definition-overriding: true
server:
  port: 8087
logging:
  path: ./logs/product

mybatis-plus:
  mapper-locations: classpath*:/mapper/*.xml
  type-aliases-package: com.szml.pl.entity

jackson:
  time-zone: Hongkong
  date-format: yyyy-MM-dd HH:mm:ss

rocketmq:
  consumer:
    group: springboot_consumer_group
    # 一次拉取消息最大值，注意是拉取消息的最大值而非消费最大值
    pull-batch-size: 10
  name-server: 101.33.248.222:9876
  producer:
    # 发送同一类消息的设置为同一个group，保证唯一
    group: springboot_producer_group
    # 发送消息超时时间，默认3000
    sendMessageTimeout: 10000
    # 发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    # 异步消息重试此处，默认2
    retryTimesWhenSendAsyncFailed: 2
    # 消息最大长度，默认1024 * 1024 * 4(默认4M)
    maxMessageSize: 4096
    # 压缩消息阈值，默认4k(1024 * 4)
    compressMessageBodyThreshold: 4096
    # 是否在内部发送失败时重试另一个broker，默认false
    retryNextServer: false


# nacos配置
nacos:
  discovery:
    register:
      healthy: false
    server-addr: 101.33.248.222:8848
# 配置dubbo
dubbo:
  application:
    name: pob-product
    id: pob-product
  monitor:
    protocol: dubbo-registry
  registry:
    address: nacos://101.33.248.222:8848
  config-center:
    address: nacos://101.33.248.222:8848
  metadata-report:
    address: nacos://101.33.248.222:8848
  protocol:
    name: dubbo
    port: 28081 # 端口不能与dubbo-provider重复;
  consumer:
    check: false

# 自定义jwt key
jwt:
  tokenHeader: Authorization #JWT存储的请求头
  secret: mySecret #JWT加解密使用的密钥
  expiration: 604800 #JWT的超期限时间(60*60*24)
  tokenHead: Bearer  #JWT负载中拿到开头

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: pob-product
  shardingsphere:
    datasource:
      names: m1
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://101.33.248.222:3306/pob_product?characterEncoding=utf-8&useSSL=false
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: 123456
    sharding:
      tables:
        product:
          actualDataNodes: m1.product_$->{1..2}
          key-generator:
            column: id
            type: SNOWFLAKE
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: product_$->{id % 2 + 1}
        product_draft:
          actualDataNodes: m1.product_draft_$->{1..2}
          key-generator:
            column: id
            type: SNOWFLAKE
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: product_draft_$->{id % 2 + 1}
    props:
      sql:
        show: true